# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ThemeSwitcherDialog
                                 A QGIS plugin
 This plugin adds a popup to easily switch between layer themes
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-07-23
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Roel Huybrechts
        email                : roel@huybrechts.re
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from qgis.PyQt import QtWidgets, QtGui, QtCore


class ThemeButton(QtWidgets.QToolButton):
    def __init__(self, themeName, theme, themeConfig, dialog, parent=None):
        super().__init__(parent)
        self.themeName = themeName
        self.theme = theme
        self.themeConfig = themeConfig
        self.dialog = dialog

        self.iconPath = ':/plugins/theme_switcher/map.png'
        self.setIcon(QtGui.QIcon(self.iconPath))
        self.setIconSize(QtCore.QSize(64, 64))

        self.setText(self.themeName)
        self.setToolButtonStyle(
            QtCore.Qt.ToolButtonStyle.ToolButtonTextUnderIcon)

        self.clicked.connect(self.switchToTheme)

    def switchToTheme(self):
        self.themeConfig.mapThemeCollection.applyTheme(
            self.theme, self.themeConfig.layerTreeRoot, self.themeConfig.layerTreeModel)

        self.dialog.close()


class ThemeSwitcherWidget(QtWidgets.QWidget):
    def __init__(self, parent, themeConfig):
        super().__init__(parent)

        self.setLayout(QtWidgets.QHBoxLayout())

        self.themeConfig = themeConfig
        self.dialog = parent
        self.populate()

        self.themeConfig.configChanged.connect(self.populate)

    def populate(self):
        # remove all groups
        for i in reversed(range(self.layout().count())):
            self.layout().itemAt(i).widget().setParent(None)

        def createThemeButton(themeName, theme, parent):
            btn = ThemeButton(themeName, theme,
                              self.themeConfig, self.dialog)
            parent.layout().addWidget(btn)

        def createGroupWidget(groupName):
            groupWidget = QtWidgets.QGroupBox(self)
            groupWidget.setTitle(groupName)
            groupWidget.setFlat(True)
            groupWidget.setLayout(QtWidgets.QHBoxLayout())

            for t in self.themeConfig.themeGroups[groupName]:
                themeName, theme = t
                createThemeButton(themeName, theme, groupWidget)

            groupWidget.layout().addStretch()
            return groupWidget

        for group in sorted([g for g in self.themeConfig.themeGroups if g != 'Other']):
            self.layout().addWidget(createGroupWidget(group))

        if len(self.themeConfig.themeGroups) > 1 and 'Other' in self.themeConfig.themeGroups:
            self.layout().addWidget(createGroupWidget('Other'))
        else:
            # no groups
            for theme in self.themeConfig.themes:
                createThemeButton(theme, theme, self)

class ThemeSwitcherDialog(QtWidgets.QDialog):
    def __init__(self, main):
        """Constructor."""
        QtWidgets.QDialog.__init__(self)
        self.main = main
        self.themeConfig = self.main.themeConfig

        self.iconPath = ':/plugins/theme_switcher/map.png'
        self.setWindowIcon(QtGui.QIcon(self.iconPath))

        self.setWindowTitle(self.main.tr(u'Theme switcher'))
        self.setLayout(QtWidgets.QVBoxLayout())

        label = QtWidgets.QLabel('Choose map theme')
        labelFont = label.font()
        labelFont.setBold(True)
        labelFont.setPointSize(12)
        label.setFont(labelFont)
        self.layout().addWidget(label)

        self.layout().addWidget(ThemeSwitcherWidget(self, self.themeConfig))

        self.layout().addStretch()

        buttonBox = QtWidgets.QDialogButtonBox(self)
        buttonBox.setOrientation(QtCore.Qt.Orientation.Horizontal)
        buttonBox.setStandardButtons(
            QtWidgets.QDialogButtonBox.Ok | QtWidgets.QDialogButtonBox.Cancel)
        buttonBox.button(
            QtWidgets.QDialogButtonBox.Ok).clicked.connect(self.close)
        buttonBox.button(
            QtWidgets.QDialogButtonBox.Cancel).clicked.connect(self.close)
        self.layout().addWidget(buttonBox)
